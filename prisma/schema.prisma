
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_URL")  // This makes migrations use the same DB
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  password       String
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  songs          Song[]
  votes          Vote[]
  playlists      Playlist[]
}

model Song {
  id             String    @id @default(cuid())
  youtubeId      String
  title          String
  artist         String?
  thumbnailUrl   String?
  duration       Int?      // duration in seconds
  addedById      String
  addedBy        User      @relation(fields: [addedById], references: [id], onDelete: Cascade)
  playlistId     String
  playlist       Playlist  @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  votes          Vote[]
  position       Int       @default(0)
  isPlaying      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([playlistId])
}

model Vote {
  id             String    @id @default(cuid())
  value          Int       // can be 1 (upvote) or -1 (downvote)
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  songId         String
  song           Song      @relation(fields: [songId], references: [id], onDelete: Cascade)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([userId, songId])
  @@index([songId])
}

model Playlist {
  id             String    @id @default(cuid())
  name           String
  description    String?
  ownerId        String
  owner          User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  songs          Song[]
  isPublic       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([ownerId])
}
